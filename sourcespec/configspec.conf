# Config file for source_spec

# GENERAL PARAMETERS --------
unused = 0  # this is a hack to fix a configobj bug with the first comment
# All the fields are optional.
# The filled in fields will be written to output files.
# Author information
author_name = string(default=None)
author_email = string(default=None)
# Agency information
agency_full_name = string(default=None)
agency_short_name = string(default=None)
agency_url = string(default=None)
# -------- GENERAL PARAMETERS

# TRACE AND METADATA PARAMETERS --------
# Channel naming for mis-oriented channels (vertical, horiz1, horiz2):
# Example:
#   mis_oriented_channels = Z,1,2
mis_oriented_channels = string_list(default=None)

# Option to specify non standard instrument codes (e.g., "L" for accelerometer)
instrument_code_acceleration = string(default=None)
instrument_code_velocity = string(default=None)

# For more complex network.station.location.channel (SCNL) naming scenarios,
# you can provide a file, in json format, with traceid (SCNL) mapping
traceid_mapping_file = string(default=None)

# List of traceids to ignore.
# Use network.station.location.channel; wildcards are accepted
# Example:
#   ignore_traceids = FR.CIEL.*.*, AM.RA0D3.00.*
ignore_traceids = force_list(default=None)

# List of traceids to use.
# Use network.station.location.channel; wildcards are accepted
# Example:
#   use_traceids = FR.CIEL.*.*, AM.RA0D3.00.*
use_traceids = force_list(default=None)

# Maximum epicentral distance (km) to process a trace
max_epi_dist = float(default=None)

# Directory or file for station metadata.
# It can be one ore more files in one of the following formats:
#  StationXML, dataless SEED, SEED RESP
# Note that SEED RESP does not contain station coordinates, which should
# therefore be in the trace header (traces in SAC format)
station_metadata = string(default=None)

# Alternatively, a directory with PAZ files can be specified:
# Note that PAZ files do not contain station coordinates, which should
# therefore be in the trace header (traces in SAC format)
paz = string(default=None)

# It is also possible to provide a constant sensitivity (i.e., flat sensor
# response curve) as a numerical value or a combination of SAC header fields
# (in this case, traces must be in SAC format).
# This parameter overrides the response curve computed from metadata or from
# PAZ files. Leave it to None to compute sensor response from metadata or PAZ.
# Examples:
#  sensitivity = 1
#  sensitivity = 1e3
#  sensitivity = resp0
#  sensitivity = resp1*resp2
#  sensitivity = user3/user2
sensitivity = string(default=None)

# Database file for storing output parameters (optional):
database_file = string(default=None)

# Correct_instrumental_reponse (optional, default=True):
#   'True', 'False' or 'sensitivity only'
# If 'sensitivity only', traces are not fully deconvolved
# for the instrumental response: only the
# sensitivity is corrected (faster, especially
# on a large number of traces).
correct_instrumental_response = option('True', 'False', 'sensitivity_only', default='True')

# Trace units.
# Leave it to 'auto' to let the code decide, based on instrument type.
# Manually set it to 'disp', 'vel' or 'acc' if you have already preprocessed
# the traces.
trace_units = option('auto', 'disp', 'vel', 'acc', default='auto')
# -------- TRACE AND METADATA PARAMETERS


# TIME WINDOW PARAMETERS --------
# P and S wave velocity (in km/s) for travel time calculation
# (if None, the global velocity model 'iasp91' is used)
vp_tt = float(default=None)
vs_tt = float(default=None)
# As an alternative, a directory containing NonLinLoc travel time grids
# can be specified and values defined above will be ignored.
# Note that reading NonLinLoc grids takes time. For simple 1D models, you
# can speed up considerably the process using a generic station
# named "DEFAULT". The coordinates of this default station are not important,
# since they will be superseded by each station's coordinates.
NLL_time_dir = string(default=None)

# Arrival tolerances (in seconds) to accept a manual P or S pick
p_arrival_tolerance = float(default=4.0)
s_arrival_tolerance = float(default=4.0)

# Start time (in seconds) of the noise window, respect to the P arrival time
pre_p_time = float(default=6.0)

# Start time (in seconds) of the S-wave window, respect to the S arrival time
pre_s_time = float(default=1.0)

# Length (in seconds) for both noise and S-wave windows
win_length = float(default=5.0)
# -------- TIME WINDOW PARAMETERS


# SPECTRUM PARAMETERS --------
# Wave type to analyse: 'P', 'S', 'SH' or 'SV'
# If 'SH' or 'SV' are selected, traces are rotated in the radial-transverse
# system. Transverse component is used for 'SH', radial (and vertical)
# components are used for 'SV'
wave_type = option('P', 'S', 'SH', 'SV', default='S')

# Integrate in time domain (default: integration in spectral domain)
time_domain_int = boolean(default=False)

# Ignore vertical components
ignore_vertical = boolean(default=False)

# Taper half width: between 0 (no taper) and 0.5
taper_halfwidth = float(0, 0.5, default=0.05)

# Spectral window length (seconds)
# Signal is tapered, and then zero padded to
# this window length, so that the spectral
# sampling is fixed to 1/spectral_win_length.
# Comment out (or set to None) to use
# S-wave window as spectral window length.
spectral_win_length = float(default=None)

# Spectral smoothing window width in frequency decades
# (i.e., log10 frequency scale).
# Example:
#  spectral_smooth_width_decades=1 means a width of 1 decade
#  (generally, too large, producing a spectrum which is too smooth).
#  spectrum(f0) is smoothed using values between f1 and f2, so that
#  log10(f1)=log10(f0)-0.5 and log10(f2)=log10(f0)+0.5
#    i.e.,
#  f1=f0/(10^0.5) and f2=f0*(10^0.5)
#    or,
#  f2/f1=10 (1 decade width)
# Default value of 0.2 is generally a good choice
spectral_smooth_width_decades = float(default=0.2)

# Residuals file path
# (a pickle file with the mean residuals per station,
# used for station correction):
residuals_filepath = string(default=None)

# Band-pass frequencies for accelerometers and velocimeters (Hz).
# Use bp_freqmin_STATION and bp_freqmax_STATION to provide
# filter frequencies for a specific STATION code.
# TODO: calculate from sampling rate?
bp_freqmin_acc    = float(default=1.0)
bp_freqmax_acc    = float(default=50.0)
bp_freqmin_shortp = float(default=1.0)
bp_freqmax_shortp = float(default=40.0)
bp_freqmin_broadb = float(default=0.5)
bp_freqmax_broadb = float(default=40.0)

# Spectral windowing frequencies for accelerometers and velocimeters (Hz)
# (spectra will be cut between these two frequencies)
# Use freq1_STATION and freq2_STATION to provide
# windowing frequencies for a specific STATION code.
freq1_acc     = float(default=1.0)
freq2_acc     = float(default=30.0)
freq1_shortp  = float(default=1.0)
freq2_shortp  = float(default=30.0)
freq1_broadb  = float(default=0.5)
freq2_broadb  = float(default=30.0)
# -------- SPECTRUM PARAMETERS


# SIGNAL/NOISE PARAMETERS --------
# Minimum rms (in trace units before instrument corrections)
# to consider a trace as noise
rmsmin = float(default=0.)

# Time domain S/N ratio min
sn_min = float(default=0)

# Maximum accepted percentage of clipped data respect to the total trace lenght
clip_max_percent = float(default=5.0)

# Maximum gap length for the whole trace, in seconds
gap_max = float(default=None)
# Maximum overlap length for the whole trace, in seconds
overlap_max = float(default=None)

# Sspectral S/N ratio min, below which a spectrum will be skipped
spectral_sn_min = float(default=0)
# Frequency range (Hz) to compute the spectral S/N ratio
# (comment out or use None to indicate the whole frequency range)
spectral_sn_freq_range = float_list(default=None)
# -------- SIGNAL/NOISE PARAMETERS


# INVERSION PARAMETERS --------
# P and S wave velocity close to the source (km/s)
vp_source = float(default=5.5)
vs_source = float(default=3.2)
# P and S wave velocity close to the stations (km/s)
# If set to None, velocity values close to the source will be used
vp_stations = float(default=None)
vs_stations = float(default=None)
# As an alternative, a directory containing a NonLinLoc model can be specified
# In this case, the values provided above will be ignored
NLL_model_dir = string(default=None)
# Density (kg/m3):
rho = float(default=2500)
# S-wave average radiation pattern coefficient:
rps = float(default=0.62)
# P-wave average radiation pattern coefficient:
rpp = float(default=0.52)
# Radiation pattern from focal mechanism, if available
rps_from_focal_mechanism = boolean(default=False)

# Weighting type: 'noise', 'frequency' or 'no_weight'
weighting = option('noise', 'frequency', 'no_weight', default='noise')
# Parameters for 'frequency' weighting (ignored for 'noise' weighting):
#   weight for f<=f_weight (Hz)
#   1      for f> f_weight (Hz)
f_weight = float(default=7.)
weight = float(default=10.)

# Initial value for t_star (seconds)
t_star_0 = float(default=0.045)
# Try to invert for t_star_0.
# If the inverted t_star_0 is non-positive, then fixed t_star_0 will be used
invert_t_star_0 = boolean(default=False)
# Allowed variability around inverted t_star_0 in the main inversion
# (expressed as a fraction of t_star_0, between 0 and 1).
# If the inverted t_star_0 is non-positive, then t_star_min_max is used
# (see below).
t_star_0_variability = float(default=0.1)
# Allowed variability around Mw_0 during the main inversion,
# in units of magnitude. Mw bounds will be:
#   Mw_0 - Mw_0_variability, Mw_0 + Mw_0_variability
Mw_0_variability = float(default=0.1)
# Inversion algorithm:
# TNC: truncated Newton algorithm (with bounds)
# LM: Levenberg-Marquardt algorithm
# (warning: Trust Region Reflective algorithm will be used instead if
#  bounds are provided)
# BH: basin-hopping algorithm
# GS: grid search
# IS: importance sampling of misfit grid, using k-d tree
inv_algorithm = option('TNC', 'LM', 'BH', 'GS', 'IS', default='TNC')
# Parameter bounds:
# specify bounds as a list, ex.:
#   fc_min_max = 0.1, 40
# (comment out or use None to indicate no bound)
# If not specified, fc bounds will be autoset
fc_min_max = float_list(default=None)
# t_star_min_max does not superseed t_star_0_variability
t_star_min_max = float_list(default=None)
# optional : Qo bounds (converted into t_star bounds in the code).
# (comment out or use None to indicate no bound)
# Note: if you want to explore negative t_star values, you have to specify
# -Qo_min, Qo_min. This beacause t_star is proportional to 1/Qo.
# Example, for searching only positive t_star values:
#   Qo_min_max = 10, 1000
# If you want to search also negative t_star values:
#   Qo_min_max = -10, 10
Qo_min_max = float_list(default=None)
# -------- INVERSION PARAMETERS

# POST-INVERSION PARAMETERS --------
# Post-inversion bounds: use this bounds to reject certain inversion
# results, per station.
# Sometimes it is better to be more permissive with inversion parameters and
# reject "bad" solutions after the inversion, rather than forcing the
# inversion to converge within strict bounds.
# fc bounds, in Hz
pi_fc_min_max = float_list(default=None)
# t_star bounds, in s
pi_t_star_min_max = float_list(default=None)
# Brune stress drop bounds, in MPa
pi_bsd_min_max = float_list(default=None)
# Maximum acceptable misfit between inverted and observed spectrum
pi_misfit_max = float(default=None)
# -------- POST-INVERSION PARAMETERS


# RADIATED-ENERGY PARAMETERS --------
# Maximum frequency (Hz) to measure radiated energy Er
# (above this frequency, the finite-band correction
# of Di Bona & Rovelli, 1988, will be applied)
max_freq_Er = float(default=None)
# -------- RADIATED-ENERGY PARAMETERS


# LOCAL MAGNITUDE PARAMETERS --------
compute_local_magnitude = boolean(default=False)
# Local magnitude parameters:
#   ml = log10(A) + a * log10(R/100) + b * (R-100) + c
# where A is the maximum W-A amplitude (in mm)
# and R is the hypocentral distance (in km)
# Default values (for California) are:
#   a = 1., b = 0.00301, c = 3.
a = float(default=1.)
b = float(default=0.00301)
c = float(default=3.)
# Band-pass filtering frequencies (Hz) for local magnitude
ml_bp_freqmin = float(default=0.1)
ml_bp_freqmax = float(default=20.0)
# -------- LOCAL MAGNITUDE PARAMETERS


# AVERAGES PARAMETERS --------
# Reject outliers before averaging, using the IQR method.
# IQR is the interquartile range Q3-Q1, where Q1 is the 25% percentile
# and Q3 is the 75% percentile.
# Values that are smaller than (Q1 - nIQR*IQR) or larger than (Q3 + nIQR*IQR)
# will be rejected as outliers.
# Set nIQR to None to disable outlier rejection.
# Note: this parameter also controls the position of "whiskers" on the source
# parameter box plots.
nIQR = float(default=1.5)
# -------- AVERAGES PARAMETERS


# PLOT PARAMETERS --------
# Show interactive plots (slower)
plot_show = boolean(default=False)
# Save plots to disk
plot_save = boolean(default=True)
# Plot file format: 'png', 'pdf' or 'pdf_multipage'
plot_save_format = option('png', 'pdf', 'pdf_multipage', default='png')
# Plots an extra synthetic spectrum with no attenuation
plot_spectra_no_attenuation = boolean(default=False)
# Plots an extra synthetic spectrum with no fc
plot_spectra_no_fc = boolean(default=False)
# Max number of rows in plots
plot_spectra_maxrows = integer(default=3)
plot_traces_maxrows = integer(default=3)
# Plot ignored traces (low S/N)
plot_traces_ignored = boolean(default=True)
# Plot ignored spectra (low S/N)
plot_spectra_ignored = boolean(default=True)
# Plot station map
plot_station_map = boolean(default=False)
# Plot station names on map
plot_station_names_on_map = boolean(default=False)
# Text size for station names
plot_station_text_size = float(default=8)
# Coastline resolution
# Use None to let the code autoset the coastline resolution.
# Otherwhise choose one of: 'full', 'high', 'intermediate', 'low' or 'crude'
plot_coastline_resolution = option('full', 'high', 'intermediate', 'low', 'crude', default=None)
# Zoom level for map tiles
# Use None to let the code autoset the zoom level
# Otherwhise choose an integer beteen 1 (minimum zoom) and 18 (maximum zoom)
# Note: for zoom levels larger than 11, some map tiles could be missing
plot_map_tiles_zoom_level = integer(default=None)
# -------- PLOT PARAMETERS


# HTML REPORT --------
# Generate an HTML page summarizing the results of this run
html_report = boolean(default=False)
# -------- HTML REPORT


# QUAKEML PARAMETERS ----------------
# Parameters for QuakeML output.
#
# A QuakeML file will be generated only if QuakeML is used for input.
# The output file will be based on the input file, with additional information
# on seismic moment, Mw and source parameters computed by SourceSpec.
# Note: if you don't understand the parameters below, then probably you
# don't need QuakeML output and you can leave all the parameters to their
# default value

# Set SourceSpec Mw as preferred
set_preferred_magnitude = boolean(default=False)
# Base for all the object ids (smi)
smi_base = string(default="smi:local")
# String to strip from the Origin id when constructing the
# Magnitude and stationMagnitude ids.
smi_strip_from_origin_id = string(default="")
# Template for the Magnitude object id (smi).
# Use $SMI_BASE to indicate smi_base defined above
# Use $ORIGIN_ID to indicate the id of the associated Origin.
smi_magnitude_template = string(default="$SMI_BASE/Magnitude/Origin/$ORIGIN_ID#sourcespec")
# Template for the stationMagnitude object id (smi).
# Use $SMI_BASE to indicate smi_base defined above
# Use $ORIGIN_ID to indicate the id of the associated Origin.
# Use $SMI_MAGNITUDE_TEMPLATE to reuse the template for Magnitude object
# Use $WAVEFORM_ID to indicate the id of the associated waveform.
smi_station_magnitude_template = string(default="$SMI_MAGNITUDE_TEMPLATE#$WAVEFORM_ID")
# Template for the MomentTensor object id (smi) which is used to store
# the scalar moment value.
# Use $SMI_BASE to indicate smi_base defined above
# Use $ORIGIN_ID to indicate the id of the associated Origin.
smi_moment_tensor_template = string(default="$SMI_BASE/MomentTensor/Origin/$ORIGIN_ID#sourcespec")
# Template for the FocalMechanism object id (smi) which is used to store
# the scalar moment value.
# Use $SMI_BASE to indicate smi_base defined above
# Use $ORIGIN_ID to indicate the id of the associated Origin.
smi_focal_mechanism_template = string(default="$SMI_BASE/FocalMechanism/Origin/$ORIGIN_ID#sourcespec")
# -----------------QUAKEML PARAMETERS
